name: Build CEF

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build:'
        type: string
        required: true
        default: 'em-7258'
      clean:
        description: 'Force clean'
        type: boolean
        required: true
        default: false

jobs:
  build:
    strategy:
      matrix:
        #arch: [win-x86, win-x64, win-arm64]
        arch: [win-arm64]
        includes:
          #- arch: win-x86
          #  output-suffix: windows32
          #  build-switch: ''
          #  runner: 'x64'
          #- arch: win-x64
          #  output-suffix: windows64
          #  build-switch: '--x64-build'
          #  runner: 'x64'
          - arch: win-arm64
            output-suffix: 'windowsarm64'
            build-switch: '--arm64-build'
            runner: 'arm64'
    runs-on:
      group: Metal
      labels: ["${{ matrix.runner }}"]
    permissions:
      contents: write
    timeout-minutes: 1440
    steps:
      - name: Download automate-git.py
        shell: cmd
        run: curl -O https://raw.githubusercontent.com/emclient/cef/refs/heads/${{ inputs.branch }}/tools/automate/automate-git.py
      - name: Build CEF (${{ matrix.arch }})
        shell: cmd
        run: |
          set GN_DEFINES=is_official_build=true
          set GYP_MSVS_VERSION=2022
          set CEF_ARCHIVE_FORMAT=tar.bz2
          python automate-git.py --download-dir=${{ github.workspace }} --url=https://github.com/emclient/cef.git --branch=${{ inputs.branch }} --minimal-distrib --client-distrib ${{ inputs.clean && '--force-clean' || '--force-build' }} ${{ matrix.build-switch }} --clean-artifacts --with-pgo-profiles
      - name: Upload CEF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cef_binary_${{ matrix.arch }}
          path: |
            chromium/src/cef/binary_distrib/cef_binary_*_${{ matrix.output-suffix }}*.tar.bz2

  release:
    if: false
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Download CEF artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Get CEF version
        id: get_version
        shell: bash
        run: |
          CEF_VERSION=$(ls -d artifacts/cef_binary_win-x86/cef_binary_*_windows32.tar.bz2 | sed -n "s/.*cef_binary_\(.*\)_windows.*/\1/p")
          echo "version=${CEF_VERSION}" >> $GITHUB_OUTPUT
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: ./artifacts/**/*.tar.bz2

  publish-nuget:
    if: false
    runs-on: ubuntu-latest
    needs: release
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Download CEF binaries
        uses: robinraju/release-downloader@v1
        with:
          tag: v${{ needs.release.outputs.version }}
          fileName: cef_binary_*_minimal.tar.bz2
      - name: Extract CEF binaries
        run: |
          mkdir nuget/cef_binary_x86
          mkdir nuget/cef_binary_x64
          mkdir nuget/cef_binary_arm64
          tar -xvjf cef_binary_*_windows32_minimal.tar.bz2 -C nuget/cef_binary_x86 --strip-components=1
          tar -xvjf cef_binary_*_windows64_minimal.tar.bz2 -C nuget/cef_binary_x64 --strip-components=1
          tar -xvjf cef_binary_*_windowsarm64_minimal.tar.bz2 -C nuget/cef_binary_arm64 --strip-components=1
      - name: Build NuGet packages
        run: |
          dotnet pack nuget/runtime.win-x86.Cef.Runtime.csproj -o artifacts
          dotnet pack nuget/runtime.win-x64.Cef.Runtime.csproj -o artifacts
          dotnet pack nuget/runtime.win-arm64.Cef.Runtime.csproj -o artifacts
          dotnet pack nuget/Cef.Runtime.csproj -o artifacts
      - name: Publish on GitHub
        run: |
          find artifacts -name '*.nupkg' | xargs -i dotnet nuget push {} -s https://nuget.pkg.github.com/emclient/index.json --api-key ${{ secrets.GITHUB_TOKEN }}
